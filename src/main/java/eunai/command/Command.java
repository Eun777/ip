package eunai.command;

import java.io.IOException;

import eunai.Storage;
import eunai.TaskList;
import eunai.exception.EmptyTaskException;
import eunai.task.Deadline;
import eunai.task.Event;
import eunai.task.Task;
import eunai.task.ToDo;
import eunai.ui.Ui;


// JavaDocs for eunai.command package generated by ChatGPT

/**
 * Handles the execution of user commands.
 * This class processes different types of commands (e.g., add, delete, mark, unmark)
 * and interacts with {@link TaskList}, {@link Ui}, and {@link Storage} to perform the appropriate actions.
 */
public class Command {

    /**
     * Executes the user command based on the parsed command type.
     * This method routes the input to the correct handler method depending on the command.
     *
     * @param input The user input command as a string.
     * @param tasks The {@link TaskList} that stores the current tasks.
     * @param ui The {@link Ui} object to interact with the user.
     * @param storage The {@link Storage} object to handle task persistence.
     */
    public static String execute(String input, TaskList tasks, Ui ui, Storage storage) {
        CommandParser.Command commandType = CommandParser.parseCommand(input);
        String response;

        switch (commandType) {
        case TODO:
            return handleTodo(input, tasks);
        case DEADLINE:
            return handleDeadline(input, tasks);
        case EVENT:
            return handleEvent(input, tasks);
        case LIST:
            return handleList(tasks);
        case MARK:
            return handleMark(input, tasks);
        case UNMARK:
            return handleUnmark(input, tasks);
        case FIND:
            return handleFind(input, tasks);
        case DELETE:
            return handleDelete(input, tasks);
        case BYE:
            return handleExit(tasks, storage);
        default:
            return "Hmm, I don't understand what this means.";
        }
    }

    /**
     * Handles the addition of a {@link ToDo} task.
     *
     * @param input The user input command containing the to-do description.
     * @param tasks The task list to add the to-do task to.
     */
    private static String handleTodo(String input, TaskList tasks) {
        try {
            if (input.length() <= 5) {
                throw new EmptyTaskException("OOPS!!! The description of a todo cannot be empty.");
            }

            String description = input.substring(5).trim();
            Task newTask = new ToDo(description, false);
            tasks.addTask(newTask);
            return getTaskAddedMessage(newTask, tasks);
        } catch (EmptyTaskException e) {
            return e.getMessage();
        }
    }

    /**
     * Handles the addition of a {@link Deadline} task.
     *
     * @param input The user input command containing the deadline description and date.
     * @param tasks The task list to add the deadline task to.
     */
    private static String handleDeadline(String input, TaskList tasks) {
        try {
            String[] parts = input.substring(9).trim().split(" /by ");
            if (parts.length < 2) {
                throw new EmptyTaskException("OOPS!!! The description of a deadline cannot be empty.");
            }

            Task newTask = new Deadline(parts[0], false, parts[1]);
            tasks.addTask(newTask);
            return getTaskAddedMessage(newTask, tasks);
        } catch (EmptyTaskException e) {
            return e.getMessage();
        }
    }

    /**
     * Handles the addition of an {@link Event} task.
     *
     * @param input The user input command containing the event description, start date, and end date.
     * @param tasks The task list to add the event task to.
     */
    private static String handleEvent(String input, TaskList tasks) {
        try {
            String[] parts = input.substring(6).trim().split(" /from | /to ");
            if (parts.length < 3) {
                throw new EmptyTaskException("OOPS!!! The description of an event cannot be empty.");
            }

            Task newTask = new Event(parts[0], false, parts[1], parts[2]);
            tasks.addTask(newTask);
            return getTaskAddedMessage(newTask, tasks);
        } catch (EmptyTaskException e) {
            return e.getMessage();
        }
    }

    /**
     * Displays the current list of tasks.
     *
     * @param tasks The task list to display.
     */
    private static String handleList(TaskList tasks) {
        return (tasks.getSize() == 0) ? "Your task list is empty." : tasks.getListString();
    }

    /**
     * Marks a task as completed.
     *
     * @param input The user input command specifying the task index to mark.
     * @param tasks The task list containing the task to mark.
     */
    private static String handleMark(String input, TaskList tasks) {
        try {
            int index = getTaskIndex(input, 5);
            tasks.getTask(index).markTask();
            return "Nice! I've marked this task as done:\n" + tasks.getTask(index).getTaskString();
        } catch (Exception e) {
            return "Please enter a valid task number after 'mark'.";
        }
    }

    /**
     * Marks a task as not completed.
     *
     * @param input The user input command specifying the task index to unmark.
     * @param tasks The task list containing the task to unmark.
     */
    private static String handleUnmark(String input, TaskList tasks) {
        try {
            int index = getTaskIndex(input, 7);
            tasks.getTask(index).unmarkTask();
            return "OK, I've marked this task as not done yet:\n" + tasks.getTask(index).getTaskString();
        } catch (Exception e) {
            return "Please enter a valid task number after 'unmark'.";
        }
    }
    /**
     * Deletes a task from the task list.
     *
     * @param input The user input command specifying the task index to delete.
     * @param tasks The task list containing the task to delete.
     */
    private static String handleDelete(String input, TaskList tasks) {
        try {
            int index = getTaskIndex(input, 7);
            Task deletedTask = tasks.getTask(index);
            tasks.deleteTask(index);
            return "Noted. I've removed this task:\n" + deletedTask.getTaskString()
                    + "\nNow you have " + tasks.getSize() + " tasks in the list.";
        } catch (Exception e) {
            return "Please enter a valid task number to delete.";
        }
    }

    /**
     * Finds and displays tasks that match the given keyword.
     *
     * @param input The user input command containing the search keyword.
     * @param tasks The task list to search within.
     */
    private static String handleFind(String input, TaskList tasks) {
        try {
            if (input.length() <= 5) {
                throw new EmptyTaskException("OOPS!! The keyword for find cannot be empty.");
            }

            String keyword = input.substring(5).trim();
            TaskList foundTasks = tasks.findTask(keyword);
            if (foundTasks.getSize() == 0) {
                return "No matching tasks found.";
            } else {
                return "Here are the matching tasks:\n" + foundTasks.getListString();
            }
        } catch (Exception e) {
            return "No task found... please try again.";
        }
    }

    private static String handleExit(TaskList tasks, Storage storage) {
        try {
            storage.saveTasks(tasks.getAllTasks());
            return "Goodbye! See you next time!";
        } catch (IOException e) {
            return "Sorry, but your tasks could not be saved...";
        }
    }

    private static int getTaskIndex(String input, int prefixLength) {
        return Integer.parseInt(input.substring(prefixLength).trim()) - 1;
    }

    private static String getTaskAddedMessage(Task task, TaskList tasks) {
        return "Got it. I've added this task:\n" + task.getTaskString()
                + "\nNow you have " + tasks.getSize() + " tasks in the list.";
    }
}
