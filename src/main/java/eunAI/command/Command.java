package eunAI.command;

import eunAI.exception.EmptyTaskException;
import eunAI.Storage;
import eunAI.TaskList;
import eunAI.ui.Ui;
import eunAI.task.Deadline;
import eunAI.task.Event;
import eunAI.task.ToDo;
import eunAI.task.Task;

import java.io.IOException;

// JavaDocs for eunAI.command package generated by ChatGPT

/**
 * Handles the execution of user commands.
 * This class processes different types of commands (e.g., add, delete, mark, unmark)
 * and interacts with {@link TaskList}, {@link Ui}, and {@link Storage} to perform the appropriate actions.
 */
public class Command {

    /**
     * Executes the user command based on the parsed command type.
     * This method routes the input to the correct handler method depending on the command.
     *
     * @param input The user input command as a string.
     * @param tasks The {@link TaskList} that stores the current tasks.
     * @param ui The {@link Ui} object to interact with the user.
     * @param storage The {@link Storage} object to handle task persistence.
     */
    public static void execute(String input, TaskList tasks, Ui ui, Storage storage) {
        CommandParser.Command commandType = CommandParser.parseCommand(input);

        switch (commandType) {
            case TODO:
                handleTodo(input, tasks, ui);
                break;
            case DEADLINE:
                handleDeadline(input, tasks, ui);
                break;
            case EVENT:
                handleEvent(input, tasks, ui);
                break;
            case LIST:
                handleList(tasks, ui);
                break;
            case MARK:
                handleMark(input, tasks, ui);
                break;
            case UNMARK:
                handleUnmark(input, tasks, ui);
                break;
            case FIND:
                handleFind(input, tasks, ui);
                break;
            case DELETE:
                handleDelete(input, tasks, ui);
                break;
            case BYE:
                try {
                    storage.saveTasks(tasks.getAllTasks());
                    ui.showGoodbyeMessage();
                    return;
                } catch (IOException e) {
                    ui.showErrorMessage("Sorry, but your tasks could not be saved...");
                }
                break;
            default:
                ui.showErrorMessage("Hmm, I don't understand what this means.");
        }
    }

    /**
     * Handles the addition of a {@link ToDo} task.
     *
     * @param input The user input command containing the to-do description.
     * @param tasks The task list to add the to-do task to.
     * @param ui The UI object to display messages to the user.
     */
    private static void handleTodo(String input, TaskList tasks, Ui ui) {
        try {
            if (input.length() <= 5) {
                throw new EmptyTaskException("OOPS!!! The description of a todo cannot be empty.");
            }
            String description = input.substring(5).trim();
            tasks.addTask(new ToDo(description, false));
            ui.showTaskAdded(tasks.getLastTask(), tasks.getSize());
        } catch (EmptyTaskException e) {
            ui.showErrorMessage(e.getMessage());
        }
    }

    /**
     * Handles the addition of a {@link Deadline} task.
     *
     * @param input The user input command containing the deadline description and date.
     * @param tasks The task list to add the deadline task to.
     * @param ui The UI object to display messages to the user.
     */
    private static void handleDeadline(String input, TaskList tasks, Ui ui) {
        try {
            String[] parts = input.substring(9).trim().split(" /by ");
            if (parts.length < 2) {
                throw new EmptyTaskException("OOPS!!! The description of a deadline cannot be empty.");
            }
            tasks.addTask(new Deadline(parts[0], false, parts[1]));
            ui.showTaskAdded(tasks.getLastTask(), tasks.getSize());
        } catch (EmptyTaskException e) {
            ui.showErrorMessage(e.getMessage());
        }
    }

    /**
     * Handles the addition of an {@link Event} task.
     *
     * @param input The user input command containing the event description, start date, and end date.
     * @param tasks The task list to add the event task to.
     * @param ui The UI object to display messages to the user.
     */
    private static void handleEvent(String input, TaskList tasks, Ui ui) {
        try {
            String[] parts = input.substring(6).trim().split(" /from | /to ");
            if (parts.length < 3) {
                throw new EmptyTaskException("OOPS!!! The description of an event cannot be empty.");
            }
            tasks.addTask(new Event(parts[0], false, parts[1], parts[2]));
            ui.showTaskAdded(tasks.getLastTask(), tasks.getSize());
        } catch (EmptyTaskException e) {
            ui.showErrorMessage(e.getMessage());
        }
    }

    /**
     * Displays the current list of tasks.
     *
     * @param tasks The task list to display.
     * @param ui The UI object to display the list to the user.
     */
    private static void handleList(TaskList tasks, Ui ui) {
        ui.showTaskList(tasks);
    }

    /**
     * Marks a task as completed.
     *
     * @param input The user input command specifying the task index to mark.
     * @param tasks The task list containing the task to mark.
     * @param ui The UI object to display confirmation to the user.
     */
    private static void handleMark(String input, TaskList tasks, Ui ui) {
        try {
            int index = Integer.parseInt(input.substring(5).trim()) - 1;
            tasks.getTask(index).markTask();
            ui.showTaskMarked(tasks.getTask(index), tasks.getSize());
        } catch (Exception e) {
            ui.showErrorMessage("Please enter a valid task number after 'mark'.");
        }
    }

    /**
     * Marks a task as not completed.
     *
     * @param input The user input command specifying the task index to unmark.
     * @param tasks The task list containing the task to unmark.
     * @param ui The UI object to display confirmation to the user.
     */
    private static void handleUnmark(String input, TaskList tasks, Ui ui) {
        try {
            int index = Integer.parseInt(input.substring(7).trim()) - 1;
            tasks.getTask(index).unmarkTask();
            ui.showTaskUnmarked(tasks.getTask(index), tasks.getSize());
        } catch (Exception e) {
            ui.showErrorMessage("Please enter a valid task number after 'unmark'.");
        }
    }

    /**
     * Deletes a task from the task list.
     *
     * @param input The user input command specifying the task index to delete.
     * @param tasks The task list containing the task to delete.
     * @param ui The UI object to display confirmation to the user.
     */
    private static void handleDelete(String input, TaskList tasks, Ui ui) {
        try {
            int index = Integer.parseInt(input.substring(7).trim()) - 1;
            Task deletedTask = tasks.getTask(index);
            tasks.deleteTask(index);
            ui.showTaskDeleted(deletedTask, tasks.getSize());
        } catch (Exception e) {
            ui.showErrorMessage("Please enter a valid task number to delete.");
        }
    }

    /**
     * Finds and displays tasks that match the given keyword.
     *
     * @param input The user input command containing the search keyword.
     * @param taskList The task list to search within.
     * @param ui The UI object to display the found tasks to the user.
     */
    private static void handleFind(String input, TaskList taskList, Ui ui) {
        try {
            if (input.length() <= 5) {
                throw new EmptyTaskException("OOPS!! The keyword for find cannot be empty.");
            }
            String keyword = input.substring(5).trim();
            TaskList foundTasks = taskList.findTask(keyword);
            ui.showFoundTasks(foundTasks);
        } catch (Exception e) {
            ui.showErrorMessage("No task found... please try again.");
        }
    }
}
